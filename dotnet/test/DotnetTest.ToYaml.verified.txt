{
  testdata/cat/api/CatLibrary.Cat`2.yml: {
    id: CatLibrary.Cat`2,
    languageId: csharp,
    title: Cat<T,K> Class,
    summary: Here's main class of this Demo.You can see mostly type of article within this class and you for more detail, please see the remarks.this class is a template class. It has two Generic parameter. they are:  and .The extension method of this class can refer to  class,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration:
[Serializable]
public class Cat<T, K> : ICat, IAnimal where T : class, new()where K : struct
      },
      {
        section: Type Parameters,
        body: [
          {
            parameters: [
              {
                name: T,
                description: This type should be class and can new instance.
              },
              {
                name: K,
                description: This type is a struct type, class type can't be used for this parameter.
              }
            ]
          }
        ]
      },
      {
        section: Examples,
        body: [
          {
            markdown:
Here's example of how to create an instance of this class. As T is limited with class and K is limited with struct.
                var a = new Cat(object, int)();
                int catNumber = new int();
                unsafe
                {
                    a.GetFeetLength(catNumber);
                }
            As you see, here we bring in pointer so we need to add unsafe keyword.
          }
        ]
      },
      {
        section: Remarks,
        body: [
          {
            markdown:
Here's all the content you can see in this class.Constructors. With different input parameters.Methods. Including:
            
            Template method.
            
            Normal method wit generic parameter.
            
            Override method.
            
            unsafe method with pointer.
            Operators. You can also see explicit operator here.Properties. Include normal property and index.Events.Fields.EII. ExplicitImplementInterface. including eii property, eii method, eii event.Extension Methods. The extension methods not definition in this class, but we can find it!
          }
        ]
      },
      {
        section: Constructors,
        body: [
          {
            jumplist: [
              {
                name: Cat(),
                description: Default constructor.
              },
              {
                name: Cat(string nickName, out int age, string realName, bool isHealthy),
                description: It's a complex constructor. The parameter will have some attributes.
              },
              {
                name: Cat(T ownType),
                description: Constructor with one generic parameter.
              }
            ]
          }
        ]
      },
      {
        section: Fields,
        body: [
          {
            jumplist: [
              {
                name: isHealthy,
                description: Field with attribute.
              },
              {
                name: ownEat
              }
            ]
          }
        ]
      },
      {
        section: Properties,
        body: [
          {
            jumplist: [
              {
                name: Age,
                description: Hint cat's age.
              },
              {
                name: Name,
                description: EII property.
              },
              {
                name: this[int a],
                description: EII index.
              },
              {
                name: this[string a],
                description: This is index property of Cat. You can see that the visibility is different between get and set method.
              }
            ]
          }
        ]
      },
      {
        section: Methods,
        body: [
          {
            jumplist: [
              {
                name: CalculateFood(DateTime date),
                description: It's a method with complex return type.
              },
              {
                name: Equals(object obj),
                description: Override the method of Object.Equals(object obj).
              },
              {
                name: GetTailLength(int* catName, params object[] parameters),
                description:
It's an unsafe method.
            As you see,  is a pointer, so we need to add unsafe keyword.
              },
              {
                name: Jump(T ownType, K anotherOwnType, ref bool cheat),
                description: This method have attribute above it.
              }
            ]
          }
        ]
      },
      {
        section: Operators,
        body: [
          {
            jumplist: [
              {
                name: explicit operator Tom(Cat<T,K> src),
                description:
Expilicit operator of this class.
            It means this cat can evolve to change to Tom. Tom and Jerry.
              },
              {
                name: operator -(Cat<T,K> lsr, int rsr),
                description: Similar with operaotr +, refer to that topic.
              },
              {
                name: operator +(Cat<T,K> lsr, int rsr),
                description: Addition operator of this class.
              }
            ]
          }
        ]
      },
      {
        section: Explicit Interface Implementations,
        body: [
          {
            jumplist: [
              {
                name: CatLibrary.IAnimal.Eat(),
                description: EII method.
              },
              {
                name: CatLibrary.IAnimal.Eat(string food),
                description: Implementation of Eat(food)
              },
              {
                name: CatLibrary.IAnimal.Eat<Tool>(Tool a),
                description: EII template method.
              }
            ]
          }
        ]
      },
      {
        section: Events,
        body: [
          {
            jumplist: [
              {
                name: CatLibrary.ICat.eat,
                description: EII event.
              },
              {
                name: ownEat,
                description: Eat event of this cat
              }
            ]
          }
        ]
      },
      {
        section: Constructors,
        body: [
          {
            section: Cat(),
            body: [
              {
                markdown: Default constructor.
              },
              {
                declaration: public Cat()
              }
            ]
          },
          {
            section: Cat(string nickName, out int age, string realName, bool isHealthy),
            body: [
              {
                markdown: It's a complex constructor. The parameter will have some attributes.
              },
              {
                declaration: public Cat(string nickName, out int age, [Out] string realName, [In] bool isHealthy)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: nickName,
                        type: string,
                        description: it's string type.
                      },
                      {
                        name: age,
                        type: int,
                        description: It's an out and ref parameter.
                      },
                      {
                        name: realName,
                        type: string,
                        description: It's an out paramter.
                      },
                      {
                        name: isHealthy,
                        type: bool,
                        description: It's an in parameter.
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: Cat(T ownType),
            body: [
              {
                markdown: Constructor with one generic parameter.
              },
              {
                declaration: public Cat(T ownType)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: ownType,
                        type: T,
                        description: This parameter type defined by class.
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        section: Fields,
        body: [
          {
            section: isHealthy,
            body: [
              {
                markdown: Field with attribute.
              },
              {
                declaration:
[NonSerialized]
[ContextStatic]
public bool isHealthy
              },
              {
                section: Field Value,
                body: [
                  {
                    parameters: [
                      {
                        type: bool
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: ownEat,
            body: [
              {
                declaration:
[CompilerGenerated]
[DebuggerBrowsable(DebuggerBrowsableState.Never)]
private EventHandler ownEat
              },
              {
                section: Field Value,
                body: [
                  {
                    parameters: [
                      {
                        type: EventHandler
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        section: Properties,
        body: [
          {
            section: Age,
            body: [
              {
                markdown: Hint cat's age.
              },
              {
                declaration: protected int Age { get; set
              },
              {
                section: Property Value,
                body: [
                  {
                    parameters: [
                      {
                        type: int
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: Name,
            body: [
              {
                markdown: EII property.
              },
              {
                declaration: public string Name { get
              },
              {
                section: Property Value,
                body: [
                  {
                    parameters: [
                      {
                        type: string
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: this[int a],
            body: [
              {
                markdown: EII index.
              },
              {
                declaration: string IAnimal.this[int a] { get
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: a,
                        type: int,
                        description: Cat's number.
                      }
                    ]
                  }
                ]
              },
              {
                section: Property Value,
                body: [
                  {
                    parameters: [
                      {
                        type: string,
                        description: Cat's name.
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: this[string a],
            body: [
              {
                markdown: This is index property of Cat. You can see that the visibility is different between get and set method.
              },
              {
                declaration: public int this[string a] { protected get; set
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: a,
                        type: string,
                        description: Cat's name.
                      }
                    ]
                  }
                ]
              },
              {
                section: Property Value,
                body: [
                  {
                    parameters: [
                      {
                        type: int,
                        description: Cat's number.
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        section: Methods,
        body: [
          {
            section: CalculateFood(DateTime date),
            body: [
              {
                markdown: It's a method with complex return type.
              },
              {
                declaration: public Dictionary<string, List<int>> CalculateFood(DateTime date)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: date,
                        type: DateTime,
                        description: Date time to now.
                      }
                    ]
                  }
                ]
              },
              {
                section: Returns,
                body: [
                  {
                    parameters: [
                      {
                        type: Dictionary<string, List<int>>,
                        description: It's a relationship map of different kind food.
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: Equals(object obj),
            body: [
              {
                markdown: Override the method of Object.Equals(object obj).
              },
              {
                declaration: public override bool Equals(object obj)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: obj,
                        type: object,
                        description: Can pass any class type.
                      }
                    ]
                  }
                ]
              },
              {
                section: Returns,
                body: [
                  {
                    parameters: [
                      {
                        type: bool,
                        description: The return value tell you whehter the compare operation is successful.
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: GetTailLength(int* catName, params object[] parameters),
            body: [
              {
                markdown:
It's an unsafe method.
            As you see,  is a pointer, so we need to add unsafe keyword.
              },
              {
                declaration: public long GetTailLength(int* catName, params object[] parameters)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: catName,
                        type: int*,
                        description: Thie represent for cat name length.
                      },
                      {
                        name: parameters,
                        type: object[],
                        description: Optional parameters.
                      }
                    ]
                  }
                ]
              },
              {
                section: Returns,
                body: [
                  {
                    parameters: [
                      {
                        type: long,
                        description: Return cat tail's length.
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: Jump(T ownType, K anotherOwnType, ref bool cheat),
            body: [
              {
                markdown: This method have attribute above it.
              },
              {
                declaration:
[Conditional("Debug")]
public void Jump(T ownType, K anotherOwnType, ref bool cheat)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: ownType,
                        type: T,
                        description: Type come from class define.
                      },
                      {
                        name: anotherOwnType,
                        type: K,
                        description: Type come from class define.
                      },
                      {
                        name: cheat,
                        type: bool,
                        description: Hint whether this cat has cheat mode.
                      }
                    ]
                  }
                ]
              },
              {
                section: Exceptions,
                body: [
                  {
                    markdown: This is an argument exception
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        section: Operators,
        body: [
          {
            section: explicit operator Tom(Cat<T,K> src),
            body: [
              {
                markdown:
Expilicit operator of this class.
            It means this cat can evolve to change to Tom. Tom and Jerry.
              },
              {
                declaration: public static explicit operator Tom(Cat<T, K> src)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: src,
                        type: Cat<T, K>,
                        description: Instance of this class.
                      }
                    ]
                  }
                ]
              },
              {
                section: Returns,
                body: [
                  {
                    parameters: [
                      {
                        type: Tom,
                        description: Advanced class type of cat.
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: operator -(Cat<T,K> lsr, int rsr),
            body: [
              {
                markdown: Similar with operaotr +, refer to that topic.
              },
              {
                declaration: public static int operator -(Cat<T, K> lsr, int rsr)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: lsr,
                        type: Cat<T, K>
                      },
                      {
                        name: rsr,
                        type: int
                      }
                    ]
                  }
                ]
              },
              {
                section: Returns,
                body: [
                  {
                    parameters: [
                      {
                        type: int
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: operator +(Cat<T,K> lsr, int rsr),
            body: [
              {
                markdown: Addition operator of this class.
              },
              {
                declaration: public static int operator +(Cat<T, K> lsr, int rsr)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: lsr,
                        type: Cat<T, K>,
                        description: ...
                      },
                      {
                        name: rsr,
                        type: int,
                        description: ~~~
                      }
                    ]
                  }
                ]
              },
              {
                section: Returns,
                body: [
                  {
                    parameters: [
                      {
                        type: int,
                        description: Result with int type.
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        section: Explicit Interface Implementations,
        body: [
          {
            section: CatLibrary.IAnimal.Eat(),
            body: [
              {
                markdown: EII method.
              },
              {
                declaration: void IAnimal.CatLibrary.IAnimal.Eat()
              }
            ]
          },
          {
            section: CatLibrary.IAnimal.Eat(string food),
            body: [
              {
                markdown: Implementation of Eat(food)
              },
              {
                declaration: void IAnimal.CatLibrary.IAnimal.Eat(string food)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: food,
                        type: string,
                        description: Food to eat
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: CatLibrary.IAnimal.Eat<Tool>(Tool a),
            body: [
              {
                markdown: EII template method.
              },
              {
                declaration: void IAnimal.CatLibrary.IAnimal.Eat<Tool>(Tool a)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: a,
                        type: Tool,
                        description: Tool name.
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        section: Events,
        body: [
          {
            section: CatLibrary.ICat.eat,
            body: [
              {
                markdown: EII event.
              },
              {
                declaration: event EventHandler CatLibrary.ICat.eat
              }
            ]
          },
          {
            section: ownEat,
            body: [
              {
                markdown: Eat event of this cat
              },
              {
                declaration: public event EventHandler ownEat
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.CatException`1.yml: {
    id: CatLibrary.CatException`1,
    languageId: csharp,
    title: CatException<T> Class,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public class CatException<T> : Exception
      },
      {
        section: Type Parameters,
        body: [
          {
            parameters: [
              {
                name: T
              }
            ]
          }
        ]
      },
      {
        section: Constructors,
        body: [
          {
            jumplist: [
              {
                name: CatException()
              }
            ]
          }
        ]
      },
      {
        section: Constructors,
        body: [
          {
            section: CatException(),
            body: [
              {
                declaration: public CatException()
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.Complex`2.yml: {
    id: CatLibrary.Complex`2,
    languageId: csharp,
    title: Complex<T,J> Class,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public class Complex<T, J>
      },
      {
        section: Type Parameters,
        body: [
          {
            parameters: [
              {
                name: T
              },
              {
                name: J
              }
            ]
          }
        ]
      },
      {
        section: Constructors,
        body: [
          {
            jumplist: [
              {
                name: Complex()
              }
            ]
          }
        ]
      },
      {
        section: Constructors,
        body: [
          {
            section: Complex(),
            body: [
              {
                declaration: public Complex()
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.FakeDelegate`1.yml: {
    id: CatLibrary.FakeDelegate`1,
    languageId: csharp,
    title: FakeDelegate<T> Delegate,
    summary: Fake delegate,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public delegate int FakeDelegate<T>(long num, string name, params object[] scores)
      },
      {
        section: Type Parameters,
        body: [
          {
            parameters: [
              {
                name: T,
                description: Fake para
              }
            ]
          }
        ]
      },
      {
        section: Parameters,
        body: [
          {
            parameters: [
              {
                name: num,
                type: long,
                description: Fake para
              },
              {
                name: name,
                type: string,
                description: Fake para
              },
              {
                name: scores,
                type: object[],
                description: Optional Parameter.
              }
            ]
          }
        ]
      },
      {
        section: Returns,
        body: [
          {
            parameters: [
              {
                type: int,
                description: Return a fake number to confuse you.
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.IAnimal.yml: {
    id: CatLibrary.IAnimal,
    languageId: csharp,
    title: IAnimal Interface,
    summary: This is basic interface of all animal.,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public interface IAnimal
      },
      {
        section: Properties,
        body: [
          {
            jumplist: [
              {
                name: Name,
                description: Name of Animal.
              },
              {
                name: this[int index],
                description: Return specific number animal's name.
              }
            ]
          }
        ]
      },
      {
        section: Methods,
        body: [
          {
            jumplist: [
              {
                name: Eat(),
                description: Animal's eat method.
              },
              {
                name: Eat(string food),
                description: Feed the animal with some food
              },
              {
                name: Eat<Tool>(Tool tool),
                description: Overload method of eat. This define the animal eat by which tool.
              }
            ]
          }
        ]
      },
      {
        section: Properties,
        body: [
          {
            section: Name,
            body: [
              {
                markdown: Name of Animal.
              },
              {
                declaration: string Name { get
              },
              {
                section: Property Value,
                body: [
                  {
                    parameters: [
                      {
                        type: string
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: this[int index],
            body: [
              {
                markdown: Return specific number animal's name.
              },
              {
                declaration: string this[int index] { get
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: index,
                        type: int,
                        description: Animal number.
                      }
                    ]
                  }
                ]
              },
              {
                section: Property Value,
                body: [
                  {
                    parameters: [
                      {
                        type: string,
                        description: Animal name.
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        section: Methods,
        body: [
          {
            section: Eat(),
            body: [
              {
                markdown: Animal's eat method.
              },
              {
                declaration: void Eat()
              }
            ]
          },
          {
            section: Eat(string food),
            body: [
              {
                markdown: Feed the animal with some food
              },
              {
                declaration: void Eat(string food)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: food,
                        type: string,
                        description: Food to eat
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: Eat<Tool>(Tool tool),
            body: [
              {
                markdown: Overload method of eat. This define the animal eat by which tool.
              },
              {
                declaration: void Eat<Tool>(Tool tool) where Tool : class
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: tool,
                        type: Tool,
                        description: Tool name.
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.ICat.yml: {
    id: CatLibrary.ICat,
    languageId: csharp,
    title: ICat Interface,
    summary: Cat's interface,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public interface ICat : IAnimal
      },
      {
        section: Events,
        body: [
          {
            jumplist: [
              {
                name: eat,
                description: eat event of cat. Every cat must implement this event.
              }
            ]
          }
        ]
      },
      {
        section: Events,
        body: [
          {
            section: eat,
            body: [
              {
                markdown: eat event of cat. Every cat must implement this event.
              },
              {
                declaration: event EventHandler eat
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.ICatExtension.yml: {
    id: CatLibrary.ICatExtension,
    languageId: csharp,
    title: ICatExtension Class,
    summary:
It's the class that contains ICat interface's extension method.
            This class must be public and static.Also it shouldn't be a geneic class,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public static class ICatExtension
      },
      {
        section: Methods,
        body: [
          {
            jumplist: [
              {
                name: Play(this ICat icat, string toy),
                description: Extension method to let cat play
              },
              {
                name: Sleep(this ICat icat, long hours),
                description: Extension method hint that how long the cat can sleep.
              }
            ]
          }
        ]
      },
      {
        section: Methods,
        body: [
          {
            section: Play(this ICat icat, string toy),
            body: [
              {
                markdown: Extension method to let cat play
              },
              {
                declaration: public static void Play(this ICat icat, string toy)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: icat,
                        type: ICat,
                        description: Cat
                      },
                      {
                        name: toy,
                        type: string,
                        description: Something to play
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            section: Sleep(this ICat icat, long hours),
            body: [
              {
                markdown: Extension method hint that how long the cat can sleep.
              },
              {
                declaration: public static void Sleep(this ICat icat, long hours)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: icat,
                        type: ICat,
                        description: The type will be extended.
                      },
                      {
                        name: hours,
                        type: long,
                        description: The length of sleep.
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.MRefDelegate`3.yml: {
    id: CatLibrary.MRefDelegate`3,
    languageId: csharp,
    title: MRefDelegate<K,T,L> Delegate,
    summary: Generic delegate with many constrains.,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public delegate void MRefDelegate<K, T, L>(K k, T t, L l) where K : class, IComparable where T : struct where L : Tom, IEnumerable<long>
      },
      {
        section: Type Parameters,
        body: [
          {
            parameters: [
              {
                name: K,
                description: Generic K.
              },
              {
                name: T,
                description: Generic T.
              },
              {
                name: L,
                description: Generic L.
              }
            ]
          }
        ]
      },
      {
        section: Parameters,
        body: [
          {
            parameters: [
              {
                name: k,
                type: K,
                description: Type K.
              },
              {
                name: t,
                type: T,
                description: Type T.
              },
              {
                name: l,
                type: L,
                description: Type L.
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.MRefNormalDelegate.yml: {
    id: CatLibrary.MRefNormalDelegate,
    languageId: csharp,
    title: MRefNormalDelegate Delegate,
    summary: Delegate in the namespace,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public delegate void MRefNormalDelegate(List<string> pics, out string name)
      },
      {
        section: Parameters,
        body: [
          {
            parameters: [
              {
                name: pics,
                type: List<string>,
                description: a name list of pictures.
              },
              {
                name: name,
                type: string,
                description: give out the needed name.
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.Tom.yml: {
    id: CatLibrary.Tom,
    languageId: csharp,
    title: Tom Class,
    summary: Tom class is only inherit from Object. Not any member inside itself.,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public class Tom
      },
      {
        section: Constructors,
        body: [
          {
            jumplist: [
              {
                name: Tom()
              }
            ]
          }
        ]
      },
      {
        section: Methods,
        body: [
          {
            jumplist: [
              {
                name: TomMethod(Complex<TomFromBaseClass,TomFromBaseClass> a, Tuple<string,Tom> b),
                description: This is a Tom Method with complex type as return
              }
            ]
          }
        ]
      },
      {
        section: Constructors,
        body: [
          {
            section: Tom(),
            body: [
              {
                declaration: public Tom()
              }
            ]
          }
        ]
      },
      {
        section: Methods,
        body: [
          {
            section: TomMethod(Complex<TomFromBaseClass,TomFromBaseClass> a, Tuple<string,Tom> b),
            body: [
              {
                markdown: This is a Tom Method with complex type as return
              },
              {
                declaration: public Complex<string, TomFromBaseClass> TomMethod(Complex<TomFromBaseClass, TomFromBaseClass> a, Tuple<string, Tom> b)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: a,
                        type: Complex<TomFromBaseClass, TomFromBaseClass>,
                        description: A complex input
                      },
                      {
                        name: b,
                        type: Tuple<string, Tom>,
                        description: Another complex input
                      }
                    ]
                  }
                ]
              },
              {
                section: Returns,
                body: [
                  {
                    parameters: [
                      {
                        type: Complex<string, TomFromBaseClass>,
                        description: Complex @CatLibrary.TomFromBaseClass
                      }
                    ]
                  }
                ]
              },
              {
                section: Exceptions,
                body: [
                  {
                    markdown: This is not implemented
                  },
                  {
                    markdown: This is the exception to be thrown when implemented
                  },
                  {
                    markdown: This is the exception in current documentation
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/CatLibrary.TomFromBaseClass.yml: {
    id: CatLibrary.TomFromBaseClass,
    languageId: csharp,
    title: TomFromBaseClass Class,
    summary: *TomFromBaseClass* inherits from @,
    fact: {
      Namespace: CatLibrary,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public class TomFromBaseClass : Tom
      },
      {
        section: Constructors,
        body: [
          {
            jumplist: [
              {
                name: TomFromBaseClass(int k),
                description: This is a #ctor with parameter
              }
            ]
          }
        ]
      },
      {
        section: Constructors,
        body: [
          {
            section: TomFromBaseClass(int k),
            body: [
              {
                markdown: This is a #ctor with parameter
              },
              {
                declaration: public TomFromBaseClass(int k)
              },
              {
                section: Parameters,
                body: [
                  {
                    parameters: [
                      {
                        name: k,
                        type: int,
                        description: 
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  testdata/cat/api/MRef.Demo.Enumeration.ColorType.yml: {
    id: MRef.Demo.Enumeration.ColorType,
    languageId: csharp,
    title: ColorType Enum,
    summary: Enumeration ColorType,
    fact: {
      Namespace: MRef.Demo.Enumeration,
      Assembly: CatLibrary.dll
    },
    body: [
      {
        declaration: public enum ColorType
      },
      {
        section: Remarks,
        body: [
          {
            markdown:
Red/Blue/Yellow can become all color you want.
            
            Orange = Red + Yellow
            
            Purple = Red + Blue
            
            Green = Blue + Yellow
          }
        ]
      },
      {
        section: Fields,
        body: [
          {
            parameters: [
              {
                name: Red,
                description: this color is red,
                default: 0
              },
              {
                name: Blue,
                description: blue like river,
                default: 1
              },
              {
                name: Yellow,
                description: yellow comes from desert,
                default: 2
              }
            ]
          }
        ]
      },
      {
        section: See also,
        body: [
          {
            markdown: 
          }
        ]
      }
    ]
  },
  testdata/cat/api/TOC.yml: [
    {
      name: CatLibrary,
      items: [
        {
          label: Classes
        },
        {
          name: Cat<T,K>,
          href: CatLibrary.Cat`2.yml
        },
        {
          name: CatException<T>,
          href: CatLibrary.CatException`1.yml
        },
        {
          name: Complex<T,J>,
          href: CatLibrary.Complex`2.yml
        },
        {
          name: ICatExtension,
          href: CatLibrary.ICatExtension.yml
        },
        {
          name: Tom,
          href: CatLibrary.Tom.yml
        },
        {
          name: TomFromBaseClass,
          href: CatLibrary.TomFromBaseClass.yml
        },
        {
          label: Interfaces
        },
        {
          name: IAnimal,
          href: CatLibrary.IAnimal.yml
        },
        {
          name: ICat,
          href: CatLibrary.ICat.yml
        },
        {
          label: Delegates
        },
        {
          name: FakeDelegate<T>,
          href: CatLibrary.FakeDelegate`1.yml
        },
        {
          name: MRefDelegate<K,T,L>,
          href: CatLibrary.MRefDelegate`3.yml
        },
        {
          name: MRefNormalDelegate,
          href: CatLibrary.MRefNormalDelegate.yml
        }
      ]
    },
    {
      name: MRef.Demo.Enumeration,
      items: [
        {
          label: Enums
        },
        {
          name: ColorType,
          href: MRef.Demo.Enumeration.ColorType.yml
        }
      ]
    }
  ]
}